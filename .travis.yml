### Project specific config ###
os: linux
language: php
env:
  global:
    - COMPOSER_DISABLE_XDEBUG_WARN="1"
    - ATOM_CHANNEL=stable
    - PHPCS_VER="*"
php: 7.3

jobs:
  include:
    # Test PHP versions
    - stage: test
      php: '5.6'
    - stage: test
      php: '7.1'
    - stage: test
      php: '7.2'
    - stage: test
      php: '7.3'

    # Test PHPCS versions
    - stage: test
      # NOTE: PHPCS v1.* only supports up to PHP 7.2
      php: '7.2'
      env: PHPCS_VER="1.*"
    - stage: test
      # NOTE: PHPCS <2.6 only supports up to PHP 7.2
      php: '7.2'
      env: PHPCS_VER="<2.6"
    - stage: test
      # NOTE: PHPCS v2.6.1 only supports up to PHP 7.2
      php: '7.2'
      env: PHPCS_VER="2.6.1"
    - stage: test
      env: PHPCS_VER="2.*"
    - stage: test
      # NOTE: PHPCS v3.0.0 only supports up to PHP 7.2
      php: '7.2'
      env: PHPCS_VER="3.0.0"

    # Check the commit messages
    - stage: test
      language: node_js
      node_js: lts/*
      before_script: skip
      install:
        - npm install
      script:
        - commitlint-travis

    - stage: release
      # Since the deploy needs APM, currently the simplest method is to run
      # build-package.sh, which requires the specs to pass, so this must run in
      # the main language instead of Node.js.
      before_script:
        - export PATH=${PATH}:${HOME}/atom/usr/bin/
      deploy:
        provider: script
        skip_cleanup: true
        script:
          - npx semantic-release

install:
  # Set the GitHub OAuth token for Composer if it is available
  - |
    if [[ -n "$COMPOSER_OAUTH_TOKEN" ]]; then
      composer config -g github-oauth.github.com "$COMPOSER_OAUTH_TOKEN";
    fi
  - export PATH="$PATH:$HOME/.config/composer/vendor/bin"
  # Install PHPCS
  - composer global require "squizlabs/php_codesniffer $PHPCS_VER"

before_script:
  - phpcs --version

### Generic setup follows ###
script:
  - curl -s -O https://raw.githubusercontent.com/atom/ci/master/build-package.sh
  - chmod u+x build-package.sh
  - "./build-package.sh"

notifications:
  email:
    on_success: never
    on_failure: change

branches:
  only:
    - master
    - "/^greenkeeper/.*$/"

git:
  depth: 10

sudo: false

dist: xenial

addons:
  apt:
    packages:
      - build-essential
      - git
      - libgnome-keyring-dev
      - fakeroot
      - libgconf-2-4

stages:
  - test
  - name: release
    if: (NOT type = pull_request) AND branch = master
